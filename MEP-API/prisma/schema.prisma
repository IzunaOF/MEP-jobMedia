// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model CommentAnswer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@map("answers_schema")
}

model Comment {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  likes     Int?
  answers   String[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  postId    String          @db.ObjectId
  userId    String          @db.ObjectId
  reply     CommentAnswer[]
  Post      Post            @relation(fields: [postId], references: [id])

  @@map("comment_schema")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  image     String?
  content   String?
  published Boolean   @default(false)
  authorId  String    @db.ObjectId
  likes     Int?
  shareds   Int?
  views     Int?
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId

  @@map("post_schema")
}

model Profile {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  rating Int[]
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique @db.ObjectId

  @@map("profile_schema")
}

model Adress {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  country     String
  state       String
  city        String
  neighbor    String
  street      String
  cep         String
  localNumber String
  complement  String
  userId      String @unique @db.ObjectId
  client      User   @relation(fields: [userId], references: [id])

  @@map("adress_schema")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  image           String
  cpf             String          @unique
  email           String          @unique
  emailVerified   DateTime?       @default(now())
  phone           String
  hashedPassword  String
  birthday        String
  profile         Profile[]
  posts           Post[]
  clientId        String[]
  adress          Adress[]
  session       Session[]
  answersComments CommentAnswer[]
  updatedAt       DateTime        @updatedAt
  createdAt       DateTime        @default(now())

  @@map("user_schema")
}

model Session {
  sessionToken String   @id @map("_id")
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  id         String   @id @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
